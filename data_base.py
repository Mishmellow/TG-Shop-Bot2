import sqlite3
import logging
from contextlib import contextmanager

DB_PATH = 'shop_bot.db'

@contextmanager
def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    try:
        yield conn
        conn.commit()
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        raise
    finally:
        conn.close()


def init_db():
    print("üéØ init_db() –í–´–ó–í–ê–ù–ê!")
    try:
        with get_db_connection() as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS users(
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER UNIQUE,
                    username TEXT,
                    first_name TEXT,
                    price INTEGER DEFAULT 0,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    referrer_id INTEGER DEFAULT NULL
                )
            ''')

            conn.execute('''
                CREATE TABLE IF NOT EXISTS orders(
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    product TEXT,
                    quantity INTEGER, 
                    address TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    status TEXT DEFAULT 'new',
                    price INTEGER DEFAULT 0,
                )
            ''')
            conn.execute('''
                    CREATE TABLE IF NOT EXISTS cart_items(
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        product TEXT,
                        quantity INTEGER,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users (user_id)
                    )
                ''')
            print('‚úÖ –¢–∞–±–ª–∏—Ü–∞ cart_items —Å–æ–∑–¥–∞–Ω–∞')

            conn.execute('''
            CREATE TABLE IF NOT EXISTS products(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            price INTEGER,
            category TEXT
            )
        ''')

            products = [
                ('–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 209, '–µ–¥–∞'),
                ('–ö–æ—Ñ–µ –õ–∞—Ç—Ç–µ', 70, '–µ–¥–∞'),
                ('–ë—É—Ä–≥–µ—Ä –ö–æ–º–±–æ', 189, '–µ–¥–∞'),
                ('–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å', 120, '–µ–¥–∞'),
                ('–§—É—Ç–±–æ–ª–∫–∞', 150, '—Ç–æ–≤–∞—Ä—ã'),
                ('–ö—Ä—É–∂–∫–∞', 100, '—Ç–æ–≤–∞—Ä—ã'),
                ('–ß–µ—Ö–æ–ª –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 200, '—Ç–æ–≤–∞—Ä—ã'),
                ('–î–æ—Å—Ç–∞–≤–∫–∞', 40, '—É—Å–ª—É–≥–∏'),
                ('–£–ø–∞–∫–æ–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞', 50, '—É—Å–ª—É–≥–∏'),
                ('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', 100, '—É—Å–ª—É–≥–∏')
            ]

            for name,price,category in products:
                conn.execute('''
                INSERT OR IGNORE INTO products(name, price, category)
                VALUES (?, ?, ?)
            ''', (name, price, category))

            try:
                conn.execute('ALTER TABLE orders ADD COLUMN comment TEXT DEFAULT ""')
                print('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ comment –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders')
            except Exception:
                print('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ comment —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")


def get_all_products():
    with get_db_connection() as conn:
        result = conn.execute('SELECT name, price FROM products')
        return [dict(row) for row in result.fetchall()]

def get_products_by_category(category):
    with get_db_connection() as conn:
        result = conn.execute(
            'SELECT name, price FROM products WHERE category = ?',
            (category,)
        )
        return [dict(row) for row in result.fetchall()]

def add_order(user_id, product, quantity, address, comment, price=0):
    print(f"[DB] –°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–∫–∞–∑: {user_id}, {product}, {quantity}, {address}")

    if not address:
        raise ValueError("–ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    if not product:
        raise ValueError("–¢–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    if not quantity or quantity <= 0:
        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

    with get_db_connection() as conn:
       cursor = conn.execute('''
            INSERT INTO orders (user_id, product, quantity, address, comment, price)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, product, quantity, address, comment, price))

def add_user(user_id: int, username: str, first_name: str, referrer_id: int = None):
    with get_db_connection() as conn:
        conn.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, referrer_id) 
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, referrer_id))

def get_user_orders(user_id):
    with get_db_connection() as conn:
        result = conn.execute('''
            SELECT product, quantity, address, created_at 
            FROM orders 
            WHERE user_id = ?
            ORDER BY created_at DESC
        ''', (user_id,))
        return result.fetchall()

def user_conn_ref(user_id: int) -> int:
        with get_db_connection() as conn:
            result = conn.execute('''
                SELECT COUNT(*) FROM users WHERE referrer_id = ?
            ''', (user_id,))
            return result.fetchone()[0]

def get_all_orders():
    with get_db_connection() as conn:
        result = conn.execute('''
        SELECT o.*, u.username, u.first_name 
            FROM orders o 
            LEFT JOIN users u ON o.user_id = u.user_id
            ORDER BY o.created_at DESC
            LIMIT 50
        ''')
        return result.fetchall()

def get_users_count():
    with get_db_connection() as conn:
        result = conn.execute('SELECT COUNT(*) FROM users')
        return result.fetchone()[0]

def update_order_status(order_id, status):
    with get_db_connection() as conn:
        conn.execute('UPDATE orders SET status = ? WHERE id = ?', (status, order_id))

def get_orders_by_user(username):
    with get_db_connection() as conn:
        result = conn.execute('''
            SELECT o.*, u.username, u.first_name 
            FROM orders o 
            LEFT JOIN users u ON o.user_id = u.user_id
            WHERE u.username LIKE ? OR u.first_name LIKE ?
            ORDER BY o.created_at DESC
        ''', (f'%{username}%', f'%{username}%'))
        return result.fetchall()

def get_order_user_id(order_id):
    with get_db_connection() as conn:
        result = conn.execute(
            'SELECT user_id FROM orders WHERE id = ?',
            (order_id,)
        )
        return result.fetchone()[0]

def get_product_price(product_name):
    with get_db_connection() as conn:
        result = conn.execute(
            'SELECT price FROM products WHERE name = ?',
            (product_name,)
        )
        row = result.fetchone()
        return row['price'] if row else 100


def save_cart_to_db(user_id, items):
    clear_cart_from_db(user_id)

    with get_db_connection() as conn:
        for item in items:
            conn.execute('''
                INSERT INTO cart_items (user_id, product, quantity)
                VALUES (?, ?, ?)
            ''', (user_id, item['product'], item['quantity']))

def load_cart_from_db(user_id):
    with get_db_connection() as conn:
        result = conn.execute('''
            SELECT product, quantity FROM cart_items 
            WHERE user_id = ?
        ''', (user_id,))
        return [dict(row) for row in result.fetchall()]

def clear_cart_from_db(user_id):
    with get_db_connection() as conn:
        conn.execute('DELETE FROM cart_items WHERE user_id = ?', (user_id,))