from aiogram import Router
from aiogram.types import Message
import json
from data_base import add_order

router = Router()


@router.message()
async def handle_all_messages(message: Message):
    print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}:")
    print(f"   –¢–µ–∫—Å—Ç: {message.text}")
    print(f"   –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {message.content_type}")
    print(f"   WebApp data: {message.web_app_data}")

    if message.web_app_data:
        print(f"üéØ WebApp –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
        print(f"üì¶ Raw data: {message.web_app_data.data}")

        try:
            data = json.loads(message.web_app_data.data)
            print(f"üìä Parsed data: {data}")

            product = data.get('product', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
            price = data.get('price', 0)

            print(f"üõç –¢–æ–≤–∞—Ä: {product}, –¶–µ–Ω–∞: {price}")


            add_order(
                user_id=message.from_user.id,
                product=product,
                quantity=1,
                address='–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ WebApp'
            )

            await message.answer(f"üéâ –ó–∞–∫–∞–∑ '{product}' –∑–∞ {price}‚Ç¥ –ø—Ä–∏–Ω—è—Ç!")
            print("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

    elif message.text and not message.text.startswith('/'):
        print(f"üìù –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")