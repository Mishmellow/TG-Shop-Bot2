from aiogram.filters import Command
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from data_base import add_order

from app.keyboards import main, inline_categories, inline_confirm_order

router = Router()

class Order(StatesGroup):
    choosing_product = State()
    specifying_quantity = State()
    providing_address = State()
    confirm_order = State()

# @router.callback_query(F.data == 'place_order')
# async def place_order(callback: CallbackQuery, state: FSMContext):
#     await state.set_state(Order.choosing_product)
#     await callback.message.edit_text(
#         '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?',
#         reply_markup= inline_categories()
#     )

# @router.callback_query(F.data.startswith('category_'), Order.choosing_product)
# async def choose_product(callback: CallbackQuery, state: FSMContext):
#     print("üéØ 1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞")
#     product = callback.data.replace('category_', '')
#     await state.update_data(product=product)
#     await state.set_state(Order.specifying_quantity)
#     await callback.message.edit_text(
#         f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {product}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
#     )

# @router.message(Order.specifying_quantity)
# async def specifying_quantity(message: Message, state: FSMContext):
#     print("üéØ 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–æ")
#     if not message.text.isdigit():
#         await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
#         return
#
#     await state.update_data(quantity=int(message.text))
#     await state.set_state(Order.providing_address)
#     await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
#
# @router.message(Order.providing_address)
# async def process_address(message: Message, state: FSMContext):
#     print("üéØ 3. –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω")
#     await state.update_data(address=message.text)
#     await state.set_state(Order.confirm_order)
#
#     data = await state.get_data()
#     await message.answer(
#         f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:\n"
#         f"–¢–æ–≤–∞—Ä: {data['product']}\n"
#         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
#         f"–ê–¥—Ä–µ—Å: {data['address']}\n"
#         f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
#         reply_markup= inline_confirm_order()
#     )
#
# @router.callback_query(F.data == 'confirm_order', Order.confirm_order)
# async def confirm_order(callback: CallbackQuery, state: FSMContext):
#     print("üéØ 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
#     data = await state.get_data()
#     print("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", data)
#
#     try:
#         add_order(
#             user_id=callback.from_user.id,
#             product=data['product'],
#             quantity=data['quantity'],
#             address=data['address']
#         )
#
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
#         await callback.answer(f'–û—à–∏–±–∫–∞: {e}', show_alert=True)
#         return
#
#     await callback.answer('–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!', show_alert=True)
#     await callback.message.edit_text(
#         '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.',
#         reply_markup=main
#     )
#     await state.clear()
#
# @router.callback_query(F.data == 'cancel_order')
# async def cancel_order(callback: CallbackQuery, state: FSMContext):
#     await state.clear()
#     await callback.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω')
#     await callback.message.edit_text(
#         '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω',
#         reply_markup=main
#     )

@router.message(Command('admin'))
async def admin_test(message: Message):
    print("üéØ –ê–î–ú–ò–ù–ö–ê –í–´–ó–í–ê–ù–ê!")
    await message.answer("–ê–¥–º–∏–Ω–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@router.message(Command('test'))
async def test_cmd(message: Message):
    print("üéØ TEST –í–´–ó–í–ê–ù!")
    await message.answer("Test —Ä–∞–±–æ—Ç–∞–µ—Ç!")