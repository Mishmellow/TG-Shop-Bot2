from aiogram.filters import Command
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.keyboards import inline_cart_keyboard, inline_continue_shopping
from data_base import clear_cart_from_db
import logging
import json

from data_base import add_order, get_user_orders, load_cart_from_db
from data_base import get_product_price
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from app.keyboards import get_web_app_keyboard,  inline_confirm_order

ADMIN_ID = 1499143658

router = Router()

class Order(StatesGroup):
    choosing_product = State()
    specifying_quantity = State()
    adding_comment = State()
    providing_address = State()
    confirm_order = State()
    continue_order = State()


@router.message(F.web_app_data)
async def handle_web_app_order(message: Message, state: FSMContext):
    raw_data = message.web_app_data.data
    chat_id = message.chat.id

    try:
        data_from_webapp = json.loads(raw_data)

        if 'items' not in data_from_webapp or not data_from_webapp['items']:
            await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ WebApp.")
            return

        await state.update_data(
            items=data_from_webapp['items'],
            address=None,
            comment=None
        )

        await state.set_state(Order.providing_address)

        await message.answer(
            "üìç –û—Ç–ª–∏—á–Ω–æ!"
            "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –∏–∑ WebApp. "
            "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )

    except json.JSONDecodeError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö WebApp. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö WebApp: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")


@router.message(Order.providing_address)
async def process_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)

    await state.set_state(Order.adding_comment)
    await message.answer(
        "üìù **–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!"
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ª—é–±–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "
        "–¥–æ–º–æ—Ñ–æ–Ω, –∫–æ–¥ –ø–æ–¥—ä–µ–∑–¥–∞, —ç—Ç–∞–∂) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip_comment')],
        ])
    )

@router.callback_query(F.data == 'confirm_order')
async def confirm_order(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    total_amount = 0
    total_quantity = 0

    if 'items' not in data or not data['items']:
        await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        await state.clear()
        return

    try:
        items_for_display = []

        for item in data['items']:
            product_price = item.get('price', 0)
            quantity = item.get('quantity', 1)

            item_total = product_price * quantity
            total_amount += item_total
            total_quantity += quantity

            add_order(
                user_id=callback.from_user.id,
                product=item['product'],
                quantity=quantity,
                address=data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω!'),
                comment=data.get('comment', ''),
                price=product_price
            )

            items_for_display.append({
                'product': item['name'],
                'quantity': quantity,
                'price': product_price
            })

        order_info = "üõí *–ù–û–í–´–ô –ó–ê–ö–ê–ó!*\n\n"
        order_info += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '–±–µ–∑ username'}\n"
        order_info += f"üìç –ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        order_info += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}\n\n"
        order_info += "üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"

        for item in items_for_display:
            item_total = item['price'] * item['quantity']
            order_info += f"‚Ä¢ {item['product']} x{item['quantity']} - {item_total}‚Ç¥\n"

        order_info += f'\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount}‚Ç¥'
        order_info += f'\nüìä –ò—Ç–æ–≥–æ: {len(items_for_display)} –ø–æ–∑–∏—Ü–∏–π, {total_quantity} —à—Ç.'

        await bot.send_message(
            chat_id=1499143658,
            text=order_info,
            parse_mode='Markdown'
        )

        await callback.message.edit_text(
            f'‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\nüí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount}‚Ç¥\n–û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É! ',
            # reply_markup=get_web_app_keyboard()
        )
        await state.clear()

    except (TelegramBadRequest, TelegramForbiddenError) as api_error:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {api_error}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ confirm_order: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    finally:
        await callback.answer()

@router.message(Order.adding_comment)
async def process_comment(message: Message, state: FSMContext):
    comment = message.text if message.text.lower() not in ['–ù–µ—Ç', 'not', '–±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è'] else ''
    await state.update_data(comment=comment)
    await state.set_state(Order.confirm_order)
    await show_order_summary(message, state)


@router.callback_query(F.data == 'cancel_order')
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω')
    await callback.message.edit_text(
        '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω',
        reply_markup=get_web_app_keyboard()
    )

@router.message(Command('my_orders'))
async def show_my_orders(message: Message):
    orders = get_user_orders(message.from_user.id)

    if not orders:
        await message.answer('üì≠ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')
        return

    orders_by_group = {}
    for order in orders:
        key = f"{order['address']}_{order['created_at'][:16]}"
        if key not in orders_by_group:
            orders_by_group[key] = []
        orders_by_group[key].append(order)

    text = 'üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n'
    for group_key, order_list in orders_by_group.items():
        text += f"üìç –ê–¥—Ä–µ—Å: {order_list[0]['address']}\n"
        text += f"üìÖ {order_list[0]['created_at'][:16]}\n"
        for order in order_list:
            text += f"   ‚Ä¢ {order['product']} x{order['quantity']}\n"
        text += "\n"

    await message.answer(text)

@router.message(Command('cancel'))
@router.message(F.text.casefold() == '–û—Ç–º–µ–Ω–∞')
async def cansel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!', reply_markup=get_web_app_keyboard())

@router.message(Command('stats'))
async def show_stats(message: Message):
    if message.from_user.id != 1499143658:
        return

    from data_base import get_users_count, get_all_orders

    users_count = get_users_count()
    orders = get_all_orders()
    total_orders = len(orders)

    stats_text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
    )

    await message.answer(stats_text, parse_mode='Markdown')

@router.callback_query(F.data == 'clear_cart')
async def cleat_cart(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    await state.update_data(items=[])
    clear_cart_from_db(user_id)

    await callback.answer('üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!')
    await callback.message.edit.text(
        'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
        reply_markup=inline_confirm_order()
    )


@router.message(Command('cart'))
@router.callback_query(F.data == 'view_cart')
async def view_cart(update: Message | CallbackQuery, state: FSMContext):
    user_id = update.from_user.id if isinstance(update, CallbackQuery) else update.from_user.id

    data = await state.get_data()
    items_from_state = data.get('items', [])


    if not items_from_state:
        items_from_db = load_cart_from_db(user_id)
        if items_from_db:
            await state.update_data(items=items_from_db)
            items = items_from_db
        else:
            items = []
    else:
        items = items_from_state

    if not items:
        text = 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'
        keyboard = inline_continue_shopping()
    else:
        text = 'üì¶ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n'
        total_amount = 0
        total_quantity = 0

        for item in items:
            price = get_product_price(item['product'])
            item_total = price * item['quantity']
            text += f'‚Ä¢ {item["product"]} x{item["quantity"]} - {item_total}‚Ç¥\n'
            total_amount += item_total
            total_quantity += item['quantity']

        text += f'\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount}‚Ç¥'
        text += f'\nüìä –¢–æ–≤–∞—Ä–æ–≤: {total_quantity} —à—Ç.'

        keyboard = inline_cart_keyboard()

    if isinstance(update, Message):
        await update.answer(text, reply_markup=keyboard)
    else:
        await update.message.edit_text(text, reply_markup=keyboard)

@router.message(F.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def handler_contact(message: Message):
    contact_text = (
        "üìû **–ù–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã**\n"
        "–û–ø–µ—Ä–∞—Ç–æ—Ä: +380 50 123 4567\n"
        "Email: support@tgshop.com\n"
        "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 21:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ."
    )
    await message.answer(
        contact_text,
        parse_mode='Markdown'
    )

@router.message(F.text == '‚ÑπÔ∏è –û –Ω–∞—Å')
async def handler_about(message: Message):
    about_text = (
        "‚ÑπÔ∏è **–û –ù–∞—à–µ–º –ú–∞–≥–∞–∑–∏–Ω–µ**\n"
        "–ú—ã ‚Äî –ª—É—á—à–∏–π –º–∞–≥–∞–∑–∏–Ω —Å–≤–µ–∂–µ–≥–æ –∫–æ—Ñ–µ –∏ –ø–∏—Ü—Ü—ã –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ! "
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏–º —Å –ª—é–±–æ–≤—å—é.\n"
        "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üõçÔ∏è –°–¥–µ–ª–∞—Ç—å –ó–∞–∫–∞–∑' –Ω–∏–∂–µ."
    )
    await message.answer(
        about_text,
        parse_mode='Markdown'
    )

async def show_order_summary(message: Message, state: FSMContext):
    data = await state.get_data()

    if 'items' not in data or not data['items']:
        await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    total_amount = 0
    summary_text = "üëÄ **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:**\n"

    for item in data['items']:
        price = item.get('price', 0)
        quantity = item.get('quantity', 1)
        item_total = price * quantity
        total_amount += item_total

        summary_text += f"- {item['name']} x{quantity} ({price} –≥—Ä–Ω)\n"

    summary_text += f"\nüìç –ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    summary_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–ù–µ—Ç')}\n"
    summary_text += f"\nüí∞ **–û–±—â–∞—è —Å—É–º–º–∞:** {total_amount} –≥—Ä–Ω."

    await message.answer(
        summary_text,
        reply_markup=inline_confirm_order(),
        parse_mode='Markdown'
    )

@router.callback_query(F.data == 'skip_comment', Order.adding_comment)
async def skip_comment(callback: CallbackQuery, state: FSMContext):
    await state.update_data(comment="–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

    await callback.message.delete()
    await show_order_summary(callback.message, state)
    await callback.answer()