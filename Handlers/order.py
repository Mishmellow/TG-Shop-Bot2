from aiogram.filters import Command
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from data_base import add_order, get_user_orders

from app.keyboards import main_menu, inline_categories, inline_confirm_order

router = Router()

class Order(StatesGroup):
    choosing_product = State()
    specifying_quantity = State()
    adding_comment = State()
    providing_address = State()
    confirm_order = State()

@router.callback_query(F.data == 'place_order')
async def place_order(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Order.choosing_product)
    await callback.message.edit_text(
        '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?',
        reply_markup= inline_categories()
    )

@router.callback_query(F.data.startswith('category_'), Order.choosing_product)
async def choose_product(callback: CallbackQuery, state: FSMContext):
    print("üéØ 1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞")
    product = callback.data.replace('category_', '')
    await state.update_data(product=product)
    await state.set_state(Order.specifying_quantity)
    await callback.message.edit_text(
        f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {product}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
    )

@router.message(Order.specifying_quantity)
async def specifying_quantity(message: Message, state: FSMContext):
    print("üéØ 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–æ")
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        return

    await state.update_data(quantity=int(message.text))
    await state.set_state(Order.providing_address)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')

@router.message(Order.providing_address)
async def process_address(message: Message, state: FSMContext):
    print("üéØ 3. –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω")
    await state.update_data(address=message.text)
    await state.set_state(Order.adding_comment)

    data = await state.get_data()
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:\n"
        f"–¢–æ–≤–∞—Ä: {data['product']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup= inline_confirm_order()
    )

@router.callback_query(F.data == 'confirm_order', Order.confirm_order)
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    print("üéØ 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
    data = await state.get_data()
    print("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", data)

    try:
        add_order(
            user_id=callback.from_user.id,
            product=data['product'],
            quantity=data['quantity'],
            address=data['address'],
            comment=data.get('comment', '')
        )

        from aiogram import Bot
        from config import TOKEN
        bot = Bot(token=TOKEN)

        await bot.send_message(
            chat_id=1499143658,
            text=f"üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '–±–µ–∑ username'}\n"
                 f"üì¶ –¢–æ–≤–∞—Ä: {data['product']}\n"
                 f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
                 f"üìç –ê–¥—Ä–µ—Å: {data['address']}"
        )

        order_info = (
            "üõí *–ù–û–í–´–ô –ó–ê–ö–ê–ó #{}*\n"
            "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{}](tg://user?id={})\n"
            "üì¶ –¢–æ–≤–∞—Ä: {}\n"
            "üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}\n"
            "üìç –ê–¥—Ä–µ—Å: {}\n"
            "‚è∞ –í—Ä–µ–º—è: {}"
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {}"
        ).format(
            callback.from_user.first_name,
            callback.from_user.id,
            data['product'],
            data['quantity'],
            data['address'],
            data.get('comment', '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
        )

        await bot.send_message(
            chat_id=1499143658,
            text=order_info,
            parse_mode='Markdown'
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await callback.answer(f'–û—à–∏–±–∫–∞: {e}', show_alert=True)
        return

    await callback.answer('–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!', show_alert=True)
    await callback.message.edit_text(
        '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.',
        reply_markup=main_menu()
    )
    await state.clear()

@router.message(Order.adding_comment)
async def process_comment(message: Message, state: FSMContext):
    print('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω')
    await state.update_data(comment=message.text)
    await state.set_state(Order.adding_comment)

    data = await state.get_data()
    confirm_text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:\n"
        f"–¢–æ–≤–∞—Ä: {data['product']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    await message.answer(confirm_text, reply_markup=inline_confirm_order())


@router.callback_query(F.data == 'cancel_order')
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω')
    await callback.message.edit_text(
        '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω',
        reply_markup=main_menu()
    )

@router.message(Command('my_orders'))
async def show_my_orders(message: Message):
    print('üéØ /my_orders –í–´–ó–í–ê–ù!')

    orders = get_user_orders(message.from_user.id)

    if not orders:
        await message.answer('üì≠ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')
        return

    text = 'üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n'
    for order in orders:
        text += f"üõç {order['product']} x{order['quantity']}\n"
        text += f"üìç –ê–¥—Ä–µ—Å: {order['address']}\n"
        text += f"üìÖ {order['created_at'][:16]}\n\n"

    await message.answer(text)

@router.message(Command('cansel'))
@router.message(F.text.casefold() == '–û—Ç–º–µ–Ω–∞')
async def cansel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!', reply_markup=main_menu())

@router.message(Command('stats'))
async def show_stats(message: Message):
    if message.from_user.id != 1499143658:
        return

    from data_base import get_users_count, get_all_orders

    users_count = get_users_count()
    orders = get_all_orders()
    total_orders = len(orders)

    stats_text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
    )

    await message.answer(stats_text, parse_mode='Markdown')